---
version: "3.8"

services:
  postgres:
    image: mirror.gcr.io/postgres:14.2-alpine3.15
    container_name: postgres
    ports:
      - 5432:5432
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U postgres -d postgres -q
      interval: 10s
      start_period: 30s
    logging:
      options:
        max-size: 200mb
        max-file: 4
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: '/var/lib/postgresql/data/pgdata/'
    volumes:
      - postgres-data:/var/lib/postgresql/data/

  backend:
    image: backend
    build:
      context: .
      dockerfile: ./Dockerfile.backend
    expose:
      - 5050:5050
    container_name: backend
    restart: unless-stopped
    healthcheck:
      test: python -c 'import urllib.request; urllib.request.urlopen("http://backend:5050/docs").getcode() == 200'
      interval: 10s
      start_period: 30s
    logging:
      options:
        max-size: 100mb
        max-file: 2
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: frontend
    build:
      context: .
      dockerfile: ./Dockerfile.frontend
    ports:
      - "2911:2911"
    container_name: frontend
    restart: unless-stopped
    logging:
      options:
        max-size: 100mb
        max-file: 2
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/storage/pabd/Datasets/pgdata/'